
from PIL import Image, ImageDraw, ImageFont, ImageOps
import qrcode
import json
import os

class LabelGenerator:
    def __init__(self, config_file="config.json"):
        """初始化标签生成器
        :param config_file: 配置文件路径
        """
        with open(config_file) as f:
            self.config = json.load(f)
        
        # 使用配置中的DPI
        self.dpi = self.config["output_dpi"]
        self.mm_to_px = self.dpi / 25.4
        
        # 确保dist目录存在
        os.makedirs("dist", exist_ok=True)
        
        # 单位转换系数
        self.unit_scale = 1 if self.config["unit"] == "mm" else 10

    def load_font(self):
        """加载字体"""
        try:
            return ImageFont.truetype(
                self.config["font"]["path"],
                self.config["font"]["size"]
            )
        except:
            return ImageFont.load_default()

    def mm_to_pixels(self, value):
        """将配置值转换为像素
        :param value: 配置值(毫米或厘米)
        :return: 像素值
        """
        return int(value * self.unit_scale * self.mm_to_px)

    def create_single_label(self, text="明信片", qr_data=None):
        """创建带框线和出血线的标签
        :param text: 标签文字内容
        :param qr_data: 二维码数据
        :return: PIL.Image对象
        """
        bleed_px = self.mm_to_pixels(self.config["bleed_width"])
        width_px = self.mm_to_pixels(
            self.config["label_width"] + self.config["bleed_width"]*2
        )
        height_px = self.mm_to_pixels(cfg["height"] + cfg["bleed"]*2)
        
        # 创建带出血的画布
        img = Image.new('L', (width_px, height_px), 255)
        draw = ImageDraw.Draw(img)
        
        # 绘制标签框线(带圆角)
        box = [
            bleed_px, bleed_px,
            width_px - bleed_px,
            height_px - bleed_px
        ]
        radius = self.mm_to_pixels(cfg["corner_radius"])
        self._draw_rounded_rectangle(draw, box, radius)
        
        # 添加文字
        font = self.load_font()
        text_x = bleed_px + self.mm_to_pixels(cfg["padding"])
        text_y = bleed_px + self.mm_to_pixels(cfg["padding"])
        draw.text((text_x, text_y), text, font=font, fill=0)
        
        # 添加二维码
        if qr_data:
            qr_size = self.mm_to_pixels(self.config["qr"]["size"])
            qr_padding = self.mm_to_pixels(self.config["qr"]["padding"])
            
            qr = qrcode.QRCode(
                version=1,
                box_size=3,
                border=2
            )
            qr.add_data(qr_data)
            qr.make(fit=True)
            qr_img = qr.make_image(fill_color="black", back_color="white")
            qr_img = qr_img.resize((qr_size, qr_size))
            
            qr_x = width_px - bleed_px - qr_size - qr_padding
            qr_y = bleed_px + qr_padding
            img.paste(qr_img, (qr_x, qr_y))
        
        return img

    def _draw_rounded_rectangle(self, draw, box, radius):
        """绘制圆角矩形"""
        # 绘制四个角的圆弧
        draw.arc([box[0], box[1], box[0]+radius*2, box[1]+radius*2], 180, 270, 0)
        draw.arc([box[2]-radius*2, box[1], box[2], box[1]+radius*2], 270, 360, 0)
        draw.arc([box[2]-radius*2, box[3]-radius*2, box[2], box[3]], 0, 90, 0)
        draw.arc([box[0], box[3]-radius*2, box[0]+radius*2, box[3]], 90, 180, 0)
        
        # 绘制四条边
        draw.line([(box[0]+radius, box[1]), (box[2]-radius, box[1])], 0)
        draw.line([(box[2], box[1]+radius), (box[2], box[3]-radius)], 0)
        draw.line([(box[0]+radius, box[3]), (box[2]-radius, box[3])], 0)
        draw.line([(box[0], box[1]+radius), (box[0], box[3]-radius)], 0)

    def create_a4_sheet(self, text="明信片", qr_data=None):
        """创建带出血和间距的A4标签页
        :param text: 标签文字内容
        :param qr_data: 二维码数据模板(会自动添加序号)
        :return: PIL.Image对象
        """
        cfg = self.config
        a4_cfg = cfg["a4"]
        label_cfg = cfg["label"]
        
        # A4实际尺寸(含出血)
        a4_width = 210 + label_cfg["bleed"]*2
        a4_height = 297 + label_cfg["bleed"]*2
        sheet = Image.new('L', 
                        (self.mm_to_pixels(a4_width),
                        (self.mm_to_pixels(a4_height))), 
                        255)
        draw = ImageDraw.Draw(sheet)
        
        # 计算标签间距和偏移量
        spacing_px = self.mm_to_pixels(a4_cfg["spacing"])
        label_width = self.mm_to_pixels(label_cfg["width"] + label_cfg["bleed"]*2)
        label_height = self.mm_to_pixels(label_cfg["height"] + label_cfg["bleed"]*2)
        
        # 交错排列标签
        for row in range(a4_cfg["rows"]):
            for col in range(a4_cfg["cols"]):
                # 计算位置(带随机偏移)
                x = label_cfg["bleed"] + col * (label_width + spacing_px)
                y = label_cfg["bleed"] + row * (label_height + spacing_px)
                
                # 生成带序号的二维码数据
                current_qr = f"{qr_data}-{row*a4_cfg['cols']+col+1}" if qr_data else None
                label = self.create_single_label(text, current_qr)
                sheet.paste(label, (int(x), int(y)))
        
        return sheet

if __name__ == "__main__":
    generator = LabelGenerator()
    
    # 生成带二维码的单标签
    label_with_qr = generator.create_single_label(
        text="明信片",
        qr_data="TRACK123456789"
    )
    label_with_qr.save("dist/label_with_qr.png")
    
    # 生成带序号的A4标签页
    a4_sheet_with_qr = generator.create_a4_sheet(
        text="明信片",
        qr_data="TRACK"
    )
    a4_sheet_with_qr.save("dist/a4_sheet_with_qr.png")
    
    print("标签生成完成，文件已保存到dist目录")
